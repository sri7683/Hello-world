{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "gpuType": "T4",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    },
    "accelerator": "GPU"
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/sri7683/Hello-world/blob/main/Disseration%20Model%20Training%20(Test)%20(19/06)\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "_t8tZ2eJCl84"
      },
      "source": [
        "## Importing Libraries"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "from sklearn.metrics import classification_report, accuracy_score, confusion_matrix, roc_curve\n"
      ],
      "metadata": {
        "id": "jFjpVRF_h0zd"
      },
      "execution_count": 36,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "df_1 = pd.read_csv(\"/content/drive/MyDrive/config/tables/EMBED_OpenData_clinical.csv\") \n",
        "df2 = pd.read_csv(\"/content/drive/MyDrive/config/tables/EMBED_OpenData_metadata_reduced.csv\")"
      ],
      "metadata": {
        "id": "t2Gypw1GiD2R",
        "outputId": "a000baf1-e138-468d-fff9-62287c5c3f0d",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 37,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-37-1dbf4aa76023>:1: DtypeWarning: Columns (28,31,33,48,49,53,54,55,56,57,59,81,84,85,93,111) have mixed types. Specify dtype option on import or set low_memory=False.\n",
            "  df_1 = pd.read_csv(\"/content/drive/MyDrive/config/tables/EMBED_OpenData_clinical.csv\")\n",
            "<ipython-input-37-1dbf4aa76023>:2: DtypeWarning: Columns (27,28) have mixed types. Specify dtype option on import or set low_memory=False.\n",
            "  df2 = pd.read_csv(\"/content/drive/MyDrive/config/tables/EMBED_OpenData_metadata_reduced.csv\")\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from google.colab import drive\n",
        "drive.mount('/content/drive')"
      ],
      "metadata": {
        "id": "PKe3-SIljTNF",
        "outputId": "e704f2ed-0c41-49cf-f41d-0817dd8ea2a9",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 38,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "df_clinical = df_1[['empi_anon','acc_anon','asses', 'tissueden',\n",
        "                          'desc','side','path_severity','numfind','total_L_find','total_R_find',\n",
        "                          'massshape','massmargin','massdens','calcfind','calcdistri','calcnumber']]\n",
        "\n",
        "df_metadata = df2[['anon_dicom_path','acc_anon','StudyDescription','SeriesDescription','FinalImageType','ImageLateralityFinal','ViewPosition','spot_mag','ROI_coords','num_roi']]\n"
      ],
      "metadata": {
        "id": "psqmBYuljT2S"
      },
      "execution_count": 39,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df_merge = pd.merge(df_metadata, df_clinical, on=['acc_anon'])\n",
        "     \n",
        "\n",
        "print(df_merge.describe().T)\n",
        "df_merge.head(5)\n",
        "     "
      ],
      "metadata": {
        "id": "YJtA9Pr9juKP",
        "outputId": "b7a95cf3-f980-49a4-d58b-df2f0b125e0c",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 802
        }
      },
      "execution_count": 40,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "                  count          mean           std           min  \\\n",
            "acc_anon       546580.0  5.475716e+15  2.596867e+15  1.000032e+15   \n",
            "spot_mag        53980.0  1.000000e+00  0.000000e+00  1.000000e+00   \n",
            "num_roi        546580.0  2.257675e-02  1.674260e-01  0.000000e+00   \n",
            "empi_anon      546580.0  5.510979e+07  2.607973e+07  1.000088e+07   \n",
            "tissueden      543023.0  2.450939e+00  7.647817e-01  1.000000e+00   \n",
            "path_severity   32307.0  2.463491e+00  1.745506e+00  0.000000e+00   \n",
            "numfind        546580.0  1.150836e+00  4.794635e-01  0.000000e+00   \n",
            "total_L_find   546580.0  4.600827e-01  8.365406e-01  0.000000e+00   \n",
            "total_R_find   546580.0  4.406162e-01  7.818027e-01  0.000000e+00   \n",
            "calcnumber     546580.0 -4.347031e-03  1.618602e-01 -6.000000e+00   \n",
            "\n",
            "                        25%           50%           75%           max  \n",
            "acc_anon       3.237031e+15  5.462058e+15  7.729889e+15  9.999903e+15  \n",
            "spot_mag       1.000000e+00  1.000000e+00  1.000000e+00  1.000000e+00  \n",
            "num_roi        0.000000e+00  0.000000e+00  0.000000e+00  4.000000e+00  \n",
            "empi_anon      3.253410e+07  5.522974e+07  7.758473e+07  9.999956e+07  \n",
            "tissueden      2.000000e+00  2.000000e+00  3.000000e+00  5.000000e+00  \n",
            "path_severity  0.000000e+00  4.000000e+00  4.000000e+00  5.000000e+00  \n",
            "numfind        1.000000e+00  1.000000e+00  1.000000e+00  9.000000e+00  \n",
            "total_L_find   0.000000e+00  0.000000e+00  1.000000e+00  2.000000e+01  \n",
            "total_R_find   0.000000e+00  0.000000e+00  1.000000e+00  1.200000e+01  \n",
            "calcnumber     0.000000e+00  0.000000e+00  0.000000e+00  7.000000e+00  \n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                                     anon_dicom_path          acc_anon  \\\n",
              "0  /mnt/NAS2/mammo/anon_dicom/cohort_1/66685715/1...  7208547536889815   \n",
              "1  /mnt/NAS2/mammo/anon_dicom/cohort_1/66685715/1...  7208547536889815   \n",
              "2  /mnt/NAS2/mammo/anon_dicom/cohort_1/66685715/1...  7208547536889815   \n",
              "3  /mnt/NAS2/mammo/anon_dicom/cohort_1/66685715/1...  7208547536889815   \n",
              "4  /mnt/NAS2/mammo/anon_dicom/cohort_1/66685715/1...  7208547536889815   \n",
              "\n",
              "         StudyDescription SeriesDescription FinalImageType  \\\n",
              "0  MG Screening Bilateral             L MLO             2D   \n",
              "1  MG Screening Bilateral              R CC             2D   \n",
              "2  MG Screening Bilateral             L MLO             2D   \n",
              "3  MG Screening Bilateral              L CC             2D   \n",
              "4  MG Screening Bilateral             R MLO             2D   \n",
              "\n",
              "  ImageLateralityFinal ViewPosition  spot_mag ROI_coords  num_roi  ...  \\\n",
              "0                    L          MLO       NaN         ()        0  ...   \n",
              "1                    R           CC       NaN         ()        0  ...   \n",
              "2                    L          MLO       NaN         ()        0  ...   \n",
              "3                    L           CC       NaN         ()        0  ...   \n",
              "4                    R          MLO       NaN         ()        0  ...   \n",
              "\n",
              "   path_severity numfind  total_L_find total_R_find massshape  massmargin  \\\n",
              "0            NaN       1           0.0          0.0       NaN         NaN   \n",
              "1            NaN       1           0.0          0.0       NaN         NaN   \n",
              "2            NaN       1           0.0          0.0       NaN         NaN   \n",
              "3            NaN       1           0.0          0.0       NaN         NaN   \n",
              "4            NaN       1           0.0          0.0       NaN         NaN   \n",
              "\n",
              "   massdens  calcfind  calcdistri calcnumber  \n",
              "0       NaN       NaN         NaN          0  \n",
              "1       NaN       NaN         NaN          0  \n",
              "2       NaN       NaN         NaN          0  \n",
              "3       NaN       NaN         NaN          0  \n",
              "4       NaN       NaN         NaN          0  \n",
              "\n",
              "[5 rows x 25 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-a0dc2dcc-ab2a-460c-a61c-c6fe3b1ddd92\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>anon_dicom_path</th>\n",
              "      <th>acc_anon</th>\n",
              "      <th>StudyDescription</th>\n",
              "      <th>SeriesDescription</th>\n",
              "      <th>FinalImageType</th>\n",
              "      <th>ImageLateralityFinal</th>\n",
              "      <th>ViewPosition</th>\n",
              "      <th>spot_mag</th>\n",
              "      <th>ROI_coords</th>\n",
              "      <th>num_roi</th>\n",
              "      <th>...</th>\n",
              "      <th>path_severity</th>\n",
              "      <th>numfind</th>\n",
              "      <th>total_L_find</th>\n",
              "      <th>total_R_find</th>\n",
              "      <th>massshape</th>\n",
              "      <th>massmargin</th>\n",
              "      <th>massdens</th>\n",
              "      <th>calcfind</th>\n",
              "      <th>calcdistri</th>\n",
              "      <th>calcnumber</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>/mnt/NAS2/mammo/anon_dicom/cohort_1/66685715/1...</td>\n",
              "      <td>7208547536889815</td>\n",
              "      <td>MG Screening Bilateral</td>\n",
              "      <td>L MLO</td>\n",
              "      <td>2D</td>\n",
              "      <td>L</td>\n",
              "      <td>MLO</td>\n",
              "      <td>NaN</td>\n",
              "      <td>()</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>/mnt/NAS2/mammo/anon_dicom/cohort_1/66685715/1...</td>\n",
              "      <td>7208547536889815</td>\n",
              "      <td>MG Screening Bilateral</td>\n",
              "      <td>R CC</td>\n",
              "      <td>2D</td>\n",
              "      <td>R</td>\n",
              "      <td>CC</td>\n",
              "      <td>NaN</td>\n",
              "      <td>()</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>/mnt/NAS2/mammo/anon_dicom/cohort_1/66685715/1...</td>\n",
              "      <td>7208547536889815</td>\n",
              "      <td>MG Screening Bilateral</td>\n",
              "      <td>L MLO</td>\n",
              "      <td>2D</td>\n",
              "      <td>L</td>\n",
              "      <td>MLO</td>\n",
              "      <td>NaN</td>\n",
              "      <td>()</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>/mnt/NAS2/mammo/anon_dicom/cohort_1/66685715/1...</td>\n",
              "      <td>7208547536889815</td>\n",
              "      <td>MG Screening Bilateral</td>\n",
              "      <td>L CC</td>\n",
              "      <td>2D</td>\n",
              "      <td>L</td>\n",
              "      <td>CC</td>\n",
              "      <td>NaN</td>\n",
              "      <td>()</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>/mnt/NAS2/mammo/anon_dicom/cohort_1/66685715/1...</td>\n",
              "      <td>7208547536889815</td>\n",
              "      <td>MG Screening Bilateral</td>\n",
              "      <td>R MLO</td>\n",
              "      <td>2D</td>\n",
              "      <td>R</td>\n",
              "      <td>MLO</td>\n",
              "      <td>NaN</td>\n",
              "      <td>()</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 25 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a0dc2dcc-ab2a-460c-a61c-c6fe3b1ddd92')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-a0dc2dcc-ab2a-460c-a61c-c6fe3b1ddd92 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-a0dc2dcc-ab2a-460c-a61c-c6fe3b1ddd92');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 40
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_merge.info()\n",
        "print(df_merge.isnull().sum())"
      ],
      "metadata": {
        "id": "IglqMCdGj0ue",
        "outputId": "3a88fc58-3234-42dd-e964-c0b36b8407fa",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 41,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "Int64Index: 546580 entries, 0 to 546579\n",
            "Data columns (total 25 columns):\n",
            " #   Column                Non-Null Count   Dtype  \n",
            "---  ------                --------------   -----  \n",
            " 0   anon_dicom_path       546580 non-null  object \n",
            " 1   acc_anon              546580 non-null  int64  \n",
            " 2   StudyDescription      546580 non-null  object \n",
            " 3   SeriesDescription     546115 non-null  object \n",
            " 4   FinalImageType        546580 non-null  object \n",
            " 5   ImageLateralityFinal  546580 non-null  object \n",
            " 6   ViewPosition          537855 non-null  object \n",
            " 7   spot_mag              53980 non-null   float64\n",
            " 8   ROI_coords            546580 non-null  object \n",
            " 9   num_roi               546580 non-null  int64  \n",
            " 10  empi_anon             546580 non-null  int64  \n",
            " 11  asses                 546580 non-null  object \n",
            " 12  tissueden             543023 non-null  float64\n",
            " 13  desc                  546580 non-null  object \n",
            " 14  side                  266970 non-null  object \n",
            " 15  path_severity         32307 non-null   float64\n",
            " 16  numfind               546580 non-null  int64  \n",
            " 17  total_L_find          546580 non-null  float64\n",
            " 18  total_R_find          546580 non-null  float64\n",
            " 19  massshape             105807 non-null  object \n",
            " 20  massmargin            23583 non-null   object \n",
            " 21  massdens              16473 non-null   object \n",
            " 22  calcfind              43697 non-null   object \n",
            " 23  calcdistri            20831 non-null   object \n",
            " 24  calcnumber            546580 non-null  int64  \n",
            "dtypes: float64(5), int64(5), object(15)\n",
            "memory usage: 108.4+ MB\n",
            "anon_dicom_path              0\n",
            "acc_anon                     0\n",
            "StudyDescription             0\n",
            "SeriesDescription          465\n",
            "FinalImageType               0\n",
            "ImageLateralityFinal         0\n",
            "ViewPosition              8725\n",
            "spot_mag                492600\n",
            "ROI_coords                   0\n",
            "num_roi                      0\n",
            "empi_anon                    0\n",
            "asses                        0\n",
            "tissueden                 3557\n",
            "desc                         0\n",
            "side                    279610\n",
            "path_severity           514273\n",
            "numfind                      0\n",
            "total_L_find                 0\n",
            "total_R_find                 0\n",
            "massshape               440773\n",
            "massmargin              522997\n",
            "massdens                530107\n",
            "calcfind                502883\n",
            "calcdistri              525749\n",
            "calcnumber                   0\n",
            "dtype: int64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_merge = df_merge.dropna(subset=['path_severity'])"
      ],
      "metadata": {
        "id": "WVCA5E0LldG4"
      },
      "execution_count": 42,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df_merge['path_severity'] = df_merge['path_severity'].astype(int)"
      ],
      "metadata": {
        "id": "ksH1heGjlGqf"
      },
      "execution_count": 43,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df_merge['path_severity'].unique()\n",
        "sns.countplot(x=\"path_severity\", data=df_merge)"
      ],
      "metadata": {
        "id": "FkOazL8Jk0qE",
        "outputId": "1eb13fd5-517f-4fe5-95c1-d22a85951ec9",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 468
        }
      },
      "execution_count": 44,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: xlabel='path_severity', ylabel='count'>"
            ]
          },
          "metadata": {},
          "execution_count": 44
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_merge['StudyDescription'].unique()"
      ],
      "metadata": {
        "id": "BuobZbPek2K-",
        "outputId": "43ec9721-343f-4dc7-cf94-b82f820bde28",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 45,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array(['MG Diagnostic Bilateral w/ CAD',\n",
              "       'MG Screen Bilat w/Tomo/CAD Stnd Protocol',\n",
              "       'MG Diagnostic Left w/CAD', 'MG Diagnostic Bilateral w/Tomo/CAD',\n",
              "       'MG Diagnostic Right w/CAD', 'MG Diagnostic Mammo Bilateral',\n",
              "       'MG Screening Bilateral', 'MG Diagnostic Right',\n",
              "       'MG Diagnostic  Right w/Tomo/CAD', 'MG Diagnostic Left',\n",
              "       'MG Diagnostic  Left w/Tomo/CAD', 'MG Screening Bilateral w/CAD',\n",
              "       'MG DIAGNOSTIC MAMMO DIGITAL BILAT W CAD',\n",
              "       'MG DIAGNOSTIC MAMMO DIGITAL RIGHT',\n",
              "       'MG Diagnostic Bilateral w/Tomosynthesis',\n",
              "       'MG Screening Digital BL w/Tomo/CAD',\n",
              "       'MG Screen Bilat w/Tomo/CAD Rad Protocol',\n",
              "       'MG Screening Left w/Tomo/CAD',\n",
              "       'MG DIAGNOSTIC MAMMO DIGITAL BILATERAL',\n",
              "       'MG Screening Right w/CAD', 'MG Screening Right w/Tomo/CAD',\n",
              "       'MG SCREENING DIGITAL BILATERAL',\n",
              "       'MG DIAGNOSTIC MAMMO DIGITAL LEFT WCAD',\n",
              "       'MG Diagnostic Bilateral CESM', 'MG DIAGNOSTIC MAMMO DIGITAL LEFT',\n",
              "       'MG Diagnostic  Right w/Tomosynthesis', 'Unspecified MG BREAST',\n",
              "       'MG Screening Left w/CAD',\n",
              "       'MG DIAGNOSTIC MAMMO DIGITAL RIGHT WCAD', 'MG Screening Right'],\n",
              "      dtype=object)"
            ]
          },
          "metadata": {},
          "execution_count": 45
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_merge['SeriesDescription'].unique()"
      ],
      "metadata": {
        "id": "0wsBL2Yik3US",
        "outputId": "7dfacc56-1bc9-45e1-83ba-f3dbba8b3817",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 46,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array(['R MLO', 'L MLO', 'L CC', 'R CC', 'R CC C-View', 'R MLO C-View',\n",
              "       'L CC C-View', 'L MLO C-View', 'L LM', 'R LM', 'L XCCL', 'R XCCL',\n",
              "       'L ML', 'R ML', 'L ML C-View', 'R LM C-View', 'R ML C-View',\n",
              "       'MG Diagnostic Mammo Digital Bilateral',\n",
              "       'MG Diagnostic Mammo Digital Left', 'R RM', 'R RL',\n",
              "       'MG Diagnostic Mammo Digital Right', 'L LM C-View', 'RMLO', 'RCC',\n",
              "       'LCC', 'LMLO', 'L RM', 'L RL', 'R XCCM', 'L AT', 'R AT', 'L CCID',\n",
              "       'L MLOID', 'L MLID', 'R MLOID', 'R CCID', 'L CV',\n",
              "       'MG Screening Digital Bilateral w/CAD', 'R XCCL C-View',\n",
              "       'L XCCL C-View', 'R XCCM C-View', 'R CV', 'L XCCM', nan,\n",
              "       'MG Screening Digital Bilateral', '2D_PROC', 'L TAN',\n",
              "       'MG Stereo Biopsy w/Vac Asst w/ Clip LT',\n",
              "       'MG Diagnostic Mammo Digital Left w/CAD',\n",
              "       'MG Diagnostic Mammo Digital Bilat w/ CAD', 'R SPECIMEN', 'R TAN',\n",
              "       'CESM_PROC_RCC', 'CESM_PROC_RMLO', 'CESM_PROC_LCC',\n",
              "       'CESM_PROC_LMLO', 'MG Diagnostic Mammo Digital Right w/CAD',\n",
              "       'L CC LE', 'L CC DES', 'L MLO LE', 'R CC DES', 'L MLO DES',\n",
              "       'R MLO DES', 'R CC LE', 'R MLO LE', 'LXCCL'], dtype=object)"
            ]
          },
          "metadata": {},
          "execution_count": 46
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_merge['asses'].unique()\n",
        "sns.countplot(x=\"asses\", data=df_merge)\n"
      ],
      "metadata": {
        "id": "Vbhim2gtj3Zf",
        "outputId": "e77ca31f-e976-403d-ad88-6cb4041dbcde",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 467
        }
      },
      "execution_count": 47,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: xlabel='asses', ylabel='count'>"
            ]
          },
          "metadata": {},
          "execution_count": 47
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "sns.countplot(x=\"asses\", data=df_clinical)"
      ],
      "metadata": {
        "id": "0vn-HNCpkoNO",
        "outputId": "61b40727-c945-46ae-97d9-097ea87c3fce",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 467
        }
      },
      "execution_count": 48,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: xlabel='asses', ylabel='count'>"
            ]
          },
          "metadata": {},
          "execution_count": 48
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# TensorFlow libraries\n",
        "import tensorflow as tf\n",
        "from tensorflow.keras.applications.resnet_v2 import ResNet50V2\n",
        "from tensorflow.keras.optimizers import RMSprop\n",
        "from tensorflow.keras.preprocessing.image import ImageDataGenerator\n",
        "\n",
        "from tensorflow.keras.layers import Dense, GlobalAveragePooling2D, Dropout\n",
        "from tensorflow.keras.models import Sequential\n",
        "from tensorflow.keras.optimizers import Adam\n",
        "\n",
        "# basic libraries\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.metrics import classification_report, confusion_matrix\n",
        "\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "import cv2\n",
        "import os\n",
        "\n",
        "import glob\n",
        "from glob import glob"
      ],
      "metadata": {
        "id": "FFlAkSypmEx7"
      },
      "execution_count": 49,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "Images = '/content/drive/MyDrive/config/sample_data'"
      ],
      "metadata": {
        "id": "E6MSrpCpm67O"
      },
      "execution_count": 50,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Trimming and replacing the path\n",
        "df_merge['anon_dicom_path'] = df_merge['anon_dicom_path'].str.replace(\"/mnt/NAS2/mammo/anon_dicom/cohort_1\", \"/content/drive/MyDrive/config/sample_data\")\n"
      ],
      "metadata": {
        "id": "r1zngER-qaLe"
      },
      "execution_count": 51,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df_merge.head(5)"
      ],
      "metadata": {
        "id": "Z-Tix1bxrKES",
        "outputId": "e0bb751c-633f-445b-8822-97c310e49b12",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 386
        }
      },
      "execution_count": 52,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                                       anon_dicom_path          acc_anon  \\\n",
              "293  /content/drive/MyDrive/config/sample_data/1738...  5967853638018160   \n",
              "294  /content/drive/MyDrive/config/sample_data/1738...  5967853638018160   \n",
              "295  /content/drive/MyDrive/config/sample_data/1738...  5967853638018160   \n",
              "296  /content/drive/MyDrive/config/sample_data/1738...  5967853638018160   \n",
              "297  /content/drive/MyDrive/config/sample_data/1738...  5967853638018160   \n",
              "\n",
              "                   StudyDescription SeriesDescription FinalImageType  \\\n",
              "293  MG Diagnostic Bilateral w/ CAD             R MLO             2D   \n",
              "294  MG Diagnostic Bilateral w/ CAD             L MLO             2D   \n",
              "295  MG Diagnostic Bilateral w/ CAD              L CC             2D   \n",
              "296  MG Diagnostic Bilateral w/ CAD              R CC             2D   \n",
              "297  MG Diagnostic Bilateral w/ CAD              L CC             2D   \n",
              "\n",
              "    ImageLateralityFinal ViewPosition  spot_mag ROI_coords  num_roi  ...  \\\n",
              "293                    R          MLO       NaN         ()        0  ...   \n",
              "294                    L          MLO       1.0         ()        0  ...   \n",
              "295                    L           CC       NaN         ()        0  ...   \n",
              "296                    R           CC       NaN         ()        0  ...   \n",
              "297                    L           CC       1.0         ()        0  ...   \n",
              "\n",
              "     path_severity numfind  total_L_find total_R_find massshape  massmargin  \\\n",
              "293              0       1           1.0          0.0       NaN         NaN   \n",
              "294              0       1           1.0          0.0       NaN         NaN   \n",
              "295              0       1           1.0          0.0       NaN         NaN   \n",
              "296              0       1           1.0          0.0       NaN         NaN   \n",
              "297              0       1           1.0          0.0       NaN         NaN   \n",
              "\n",
              "     massdens  calcfind  calcdistri calcnumber  \n",
              "293       NaN       NaN         NaN          0  \n",
              "294       NaN       NaN         NaN          0  \n",
              "295       NaN       NaN         NaN          0  \n",
              "296       NaN       NaN         NaN          0  \n",
              "297       NaN       NaN         NaN          0  \n",
              "\n",
              "[5 rows x 25 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-702b16e0-b105-4523-ab43-5374bc40bf7a\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>anon_dicom_path</th>\n",
              "      <th>acc_anon</th>\n",
              "      <th>StudyDescription</th>\n",
              "      <th>SeriesDescription</th>\n",
              "      <th>FinalImageType</th>\n",
              "      <th>ImageLateralityFinal</th>\n",
              "      <th>ViewPosition</th>\n",
              "      <th>spot_mag</th>\n",
              "      <th>ROI_coords</th>\n",
              "      <th>num_roi</th>\n",
              "      <th>...</th>\n",
              "      <th>path_severity</th>\n",
              "      <th>numfind</th>\n",
              "      <th>total_L_find</th>\n",
              "      <th>total_R_find</th>\n",
              "      <th>massshape</th>\n",
              "      <th>massmargin</th>\n",
              "      <th>massdens</th>\n",
              "      <th>calcfind</th>\n",
              "      <th>calcdistri</th>\n",
              "      <th>calcnumber</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>293</th>\n",
              "      <td>/content/drive/MyDrive/config/sample_data/1738...</td>\n",
              "      <td>5967853638018160</td>\n",
              "      <td>MG Diagnostic Bilateral w/ CAD</td>\n",
              "      <td>R MLO</td>\n",
              "      <td>2D</td>\n",
              "      <td>R</td>\n",
              "      <td>MLO</td>\n",
              "      <td>NaN</td>\n",
              "      <td>()</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>294</th>\n",
              "      <td>/content/drive/MyDrive/config/sample_data/1738...</td>\n",
              "      <td>5967853638018160</td>\n",
              "      <td>MG Diagnostic Bilateral w/ CAD</td>\n",
              "      <td>L MLO</td>\n",
              "      <td>2D</td>\n",
              "      <td>L</td>\n",
              "      <td>MLO</td>\n",
              "      <td>1.0</td>\n",
              "      <td>()</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>295</th>\n",
              "      <td>/content/drive/MyDrive/config/sample_data/1738...</td>\n",
              "      <td>5967853638018160</td>\n",
              "      <td>MG Diagnostic Bilateral w/ CAD</td>\n",
              "      <td>L CC</td>\n",
              "      <td>2D</td>\n",
              "      <td>L</td>\n",
              "      <td>CC</td>\n",
              "      <td>NaN</td>\n",
              "      <td>()</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>296</th>\n",
              "      <td>/content/drive/MyDrive/config/sample_data/1738...</td>\n",
              "      <td>5967853638018160</td>\n",
              "      <td>MG Diagnostic Bilateral w/ CAD</td>\n",
              "      <td>R CC</td>\n",
              "      <td>2D</td>\n",
              "      <td>R</td>\n",
              "      <td>CC</td>\n",
              "      <td>NaN</td>\n",
              "      <td>()</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>297</th>\n",
              "      <td>/content/drive/MyDrive/config/sample_data/1738...</td>\n",
              "      <td>5967853638018160</td>\n",
              "      <td>MG Diagnostic Bilateral w/ CAD</td>\n",
              "      <td>L CC</td>\n",
              "      <td>2D</td>\n",
              "      <td>L</td>\n",
              "      <td>CC</td>\n",
              "      <td>1.0</td>\n",
              "      <td>()</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 25 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-702b16e0-b105-4523-ab43-5374bc40bf7a')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-702b16e0-b105-4523-ab43-5374bc40bf7a button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-702b16e0-b105-4523-ab43-5374bc40bf7a');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 52
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_merge.to_csv('/content/drive/MyDrive/config/tables/df_merge.csv', index=False)\n"
      ],
      "metadata": {
        "id": "Nt2qPI-h1137"
      },
      "execution_count": 56,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Reset the index\n",
        "df_merge = df_merge.reset_index(drop=True)"
      ],
      "metadata": {
        "id": "MbCykJKdrwUz"
      },
      "execution_count": 83,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# a sample path\n",
        "df_merge.loc[22723, 'anon_dicom_path']"
      ],
      "metadata": {
        "id": "IfygrHRzrRl9",
        "outputId": "f983a162-b58f-4b47-8b12-c87c69987da1",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 54
        }
      },
      "execution_count": 84,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'/mnt/NAS2/mammo/anon_dicom/cohort_2/31982698/1.2.841.113974.3.57.1.51011952.20150418.1091407/1.2.841.113683.2750824664.1429166271.2145.11105/1.2.826.0.1.3680043.8.498.11674139496850545333837649356769726268.dcm'"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 84
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#we will now get the list of ROIs for each of these images. ROIs are structured as a list of lists, and each image\n",
        "# can have 0 to multiple ROIs. We will therefore parse the ROI list to expand it such that each row will contain one ROI.\n",
        "# If an image has multiple ROIs, this will result in multiple rows for that image in the resultant dataframe\n",
        "\n",
        "#define function\n",
        "def separate_roi(df):\n",
        "    df_list = []\n",
        "    for ind, row in df.iterrows():\n",
        "        path = row['anon_dicom_path']\n",
        "        roi_num = [int(s) for s in re.findall(r'\\b\\d+\\b', row['ROI_coords'])]\n",
        "        if len(roi_num)==4:\n",
        "            df_list.append([path, row['ROI_coords'], row['ROI_coords']])\n",
        "        else:\n",
        "            count = 0\n",
        "            roi = []\n",
        "            for i in roi_num:\n",
        "                count += 1\n",
        "                roi.append(i)\n",
        "                if count%4 == 0:\n",
        "                    df_list.append([path, row['ROI_coords'], \"((\"+str(roi[0])+\", \"+str(roi[1])+\", \"+str(roi[2])+\", \"+str(roi[3])+\"),)\"])\n",
        "                    roi = []\n",
        "    df_roi_sep = pd.DataFrame(df_list)\n",
        "    df_roi_sep.columns = ['anon_dicom_path','ROI_coords','ROI_separated']\n",
        "    df_cp = df.copy()\n",
        "    df_cp = df_cp.merge(df_roi_sep, how='left', on=['anon_dicom_path','ROI_coords'])\n",
        "    return df_cp"
      ],
      "metadata": {
        "id": "IIM9pDqncwt3"
      },
      "execution_count": 85,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "pip install pylibjpeg"
      ],
      "metadata": {
        "id": "oXLo3EwtdEbZ",
        "outputId": "c6861192-eaac-4486-bdae-6a18b34be590",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 86,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n",
            "Requirement already satisfied: pylibjpeg in /usr/local/lib/python3.10/dist-packages (1.4.0)\n",
            "Requirement already satisfied: numpy in /usr/local/lib/python3.10/dist-packages (from pylibjpeg) (1.22.4)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import re\n",
        "import pydicom\n",
        "import pylibjpeg\n",
        "import matplotlib.patches as patches\n",
        "from matplotlib import pyplot as plt\n"
      ],
      "metadata": {
        "id": "_euV0enRdDA-"
      },
      "execution_count": 87,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def stats(df): #the function displays dataframe size, countings of unique patients and unique exams\n",
        "    print('Dataframe size: ' + str(df.shape))\n",
        "    try:\n",
        "        print('# patients: ' + str(df.empi_anon.nunique()))\n",
        "    except:\n",
        "        print('# patients: ' + str(df.empi_anon_x.nunique()))\n",
        "    print('# exams: ' + str(df.acc_anon.nunique()))"
      ],
      "metadata": {
        "id": "mWRZ-hsidPlW"
      },
      "execution_count": 88,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# To export ROIs, filter the ones with ROIs\n",
        "df_cancer_ROI = df_merge.loc[df_merge.ROI_coords!='()']\n",
        "stats(df_cancer_ROI)\n",
        "\n",
        "# Separate multiple ROIs into individual rows\n",
        "df_cancer_ROI = separate_roi(df_cancer_ROI)\n",
        "stats(df_cancer_ROI)\n",
        "\n",
        "# Export to csv\n",
        "df_cancer_ROI.to_csv(\"BR0CancerROIs.csv\")"
      ],
      "metadata": {
        "id": "w0r8vZjjc2uQ",
        "outputId": "ea57e960-b28f-4135-f5ac-69d6ec9fe62d",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 89,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Dataframe size: (1623, 25)\n",
            "# patients: 339\n",
            "# exams: 390\n",
            "Dataframe size: (3597, 26)\n",
            "# patients: 339\n",
            "# exams: 390\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_cancer_ROI.ROI_coords"
      ],
      "metadata": {
        "id": "ruVKp6Ukc5Xb",
        "outputId": "973c5c84-6d9f-460a-ee9d-6d2ca709c8a8",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 90,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0         ((1365, 272, 1610, 508),)\n",
              "1         ((1951, 347, 2244, 626),)\n",
              "2         ((2825, 828, 2904, 907),)\n",
              "3         ((1900, 812, 2016, 993),)\n",
              "4        ((2300, 776, 2689, 1149),)\n",
              "                   ...             \n",
              "3592     ((2201, 954, 2578, 1401),)\n",
              "3593       ((774, 406, 1080, 633),)\n",
              "3594      ((1049, 550, 1462, 858),)\n",
              "3595    ((1909, 1196, 2353, 1676),)\n",
              "3596     ((1823, 860, 2323, 1329),)\n",
              "Name: ROI_coords, Length: 3597, dtype: object"
            ]
          },
          "metadata": {},
          "execution_count": 90
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "sample_file_name = df_cancer_ROI.anon_dicom_path[1]\n",
        "sample_file_ROI = df_cancer_ROI.ROI_coords[1]\n",
        "sample_file_ROI"
      ],
      "metadata": {
        "id": "vQl3tMAudZ6p",
        "outputId": "b57fdc17-9cbd-4d93-80ef-82863def6b2e",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 36
        }
      },
      "execution_count": 91,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'((1951, 347, 2244, 626),)'"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 91
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "sample_file_name = \"/content/drive/MyDrive/config/sample_data/10000879/1.2.842.113970.3.62.1.56868341.20180426.1095160/1.2.840.113684.2750825173.1524118967.4848.25046.1/1.2.826.0.1.3680043.8.498.12326784267688742524174894068105129442.dcm\""
      ],
      "metadata": {
        "id": "pzVZiQFqdelT"
      },
      "execution_count": 92,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "pip list | grep pylibjpeg-libjpeg"
      ],
      "metadata": {
        "id": "JuQGpppxsrdV",
        "outputId": "94f1c94d-1d29-4c04-885f-b6efeb2747e5",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 93,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "pylibjpeg-libjpeg             1.3.4\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "pip show pydicom"
      ],
      "metadata": {
        "id": "uwj9IGnGsxiT",
        "outputId": "34b744ed-97d2-451f-beab-b730ecb2cc7b",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 94,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Name: pydicom\n",
            "Version: 2.4.0\n",
            "Summary: A pure Python package for reading and writing DICOM data\n",
            "Home-page: \n",
            "Author: \n",
            "Author-email: Darcy Mason and contributors <darcymason@gmail.com>\n",
            "License: \n",
            "Location: /usr/local/lib/python3.10/dist-packages\n",
            "Requires: \n",
            "Required-by: \n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "pip install pydicom pylibjpeg-libjpeg"
      ],
      "metadata": {
        "id": "3seN7_O9s0Y5",
        "outputId": "a49c4b30-e2ee-425d-9f1f-1f95c9623633",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 95,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n",
            "Requirement already satisfied: pydicom in /usr/local/lib/python3.10/dist-packages (2.4.0)\n",
            "Requirement already satisfied: pylibjpeg-libjpeg in /usr/local/lib/python3.10/dist-packages (1.3.4)\n",
            "Requirement already satisfied: numpy>=1.22 in /usr/local/lib/python3.10/dist-packages (from pylibjpeg-libjpeg) (1.22.4)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pydicom\n",
        "from pydicom.pixel_data_handlers.util import apply_voi_lut\n",
        "import numpy as np\n",
        "\n",
        "dcm = pydicom.dcmread(sample_file_name)\n",
        "pixel_data = dcm.pixel_array\n",
        "\n"
      ],
      "metadata": {
        "id": "Uh-yc9OCtg4X"
      },
      "execution_count": 96,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Read in sample dicom file\n",
        "ds = pydicom.dcmread(sample_file_name)\n",
        "arr = ds.pixel_array\n",
        "\n",
        "# Flip the dicom file left to right, the flipping logic is included in the dcm to png file conversion code\n",
        "new_np_array = np.copy(arr)\n",
        "#define the width(w) and height(h) of the image\n",
        "h, w = arr.shape\n",
        "#make the image left-right\n",
        "for j in range(0,w):\n",
        "    for i in range(0,h):\n",
        "        new_np_array[i,j] = arr[i,w-1-j]"
      ],
      "metadata": {
        "id": "xACoA1LXdgcV"
      },
      "execution_count": 97,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install pydicom"
      ],
      "metadata": {
        "id": "btt4rQxkwD6i",
        "outputId": "08568718-98ea-47c2-8e14-8aae2147a525",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 98,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n",
            "Requirement already satisfied: pydicom in /usr/local/lib/python3.10/dist-packages (2.4.0)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pydicom\n",
        "import os"
      ],
      "metadata": {
        "id": "P2HoYR7SyDO5"
      },
      "execution_count": 99,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Specify the directory containing the DICOM files\n",
        "dataset_dir = '/content/drive/MyDrive/config/sample_data/10000879'"
      ],
      "metadata": {
        "id": "ASOJ3sHtyHQe"
      },
      "execution_count": 100,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "dicom_files=[]\n",
        "# Recursively search for DICOM files\n",
        "for root, dirs, files in os.walk(dataset_dir):\n",
        "    for file in files:\n",
        "        if file.endswith('.dcm'):\n",
        "            dicom_files.append(os.path.join(root, file))"
      ],
      "metadata": {
        "id": "mI9p3WdpyQAs"
      },
      "execution_count": 101,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Read each DICOM file and extract the pixel data\n",
        "for file in dicom_files[:2]:\n",
        "    dcm = pydicom.dcmread(file)\n",
        "    pixel_data = dcm.pixel_array\n",
        "    print(pixel_data)"
      ],
      "metadata": {
        "id": "XyGtViMZyVco",
        "outputId": "45b007e9-37f6-4e3f-b9f0-71298e35b787",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 102,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[   0    0    0 ...    0    0    0]\n",
            " [   0    0    0 ...    0    0    0]\n",
            " [   0    0    0 ...    0    0    0]\n",
            " ...\n",
            " [ 881  902  776 ...    0    0    0]\n",
            " [ 944  989 1018 ...    0    0    0]\n",
            " [ 744  888  875 ...    0    0    0]]\n",
            "[[   0    0    0 ...    0    0    0]\n",
            " [   0    0    0 ...    0    0    0]\n",
            " [   0    0    0 ...    0    0    0]\n",
            " ...\n",
            " [   0    0    0 ... 4051 4060 4059]\n",
            " [   0    0    0 ... 4049 4054 4062]\n",
            " [   0    0    0 ... 4049 4057 4063]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Read in sample dicom file\n",
        "ds = pydicom.dcmread(sample_file_name)\n",
        "arr = ds.pixel_array\n",
        "\n",
        "# Flip the dicom file left to right, the flipping logic is included in the dcm to png file conversion code\n",
        "new_np_array = np.copy(arr)\n",
        "#define the width(w) and height(h) of the image\n",
        "h, w = arr.shape\n",
        "#make the image left-right\n",
        "for j in range(0,w):\n",
        "    for i in range(0,h):\n",
        "        new_np_array[i,j] = arr[i,w-1-j]"
      ],
      "metadata": {
        "id": "no8oxJaB0akv"
      },
      "execution_count": 103,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Getting the coordinates of ROI\n",
        "rois = [int(s) for s in re.findall(r'\\b\\d+\\b', sample_file_ROI)]\n",
        "y1, x1, y2, x2 = rois"
      ],
      "metadata": {
        "id": "un1Kf0Gi1TGS"
      },
      "execution_count": 104,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Display ROI on image\n",
        "figure, ax = plt.subplots(1)\n",
        "rect = patches.Rectangle((x1, y1), x2-x1, y2-y1, linewidth=1, edgecolor='r', facecolor='none')\n",
        "ax.imshow(new_np_array, cmap=\"gray\")\n",
        "ax.add_patch(rect)"
      ],
      "metadata": {
        "id": "WJ4ioLoO1dHa",
        "outputId": "756c4463-99f9-4adf-b0c9-59f5e336a004",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 453
        }
      },
      "execution_count": 105,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.patches.Rectangle at 0x7f961fce1750>"
            ]
          },
          "metadata": {},
          "execution_count": 105
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "num_classes = len(df_merge['asses'].unique())\n",
        "from keras.utils import to_categorical\n",
        "\n",
        "# Convert labels to categorical format\n",
        "df_merge['label'] = df_merge['asses'].astype('category').cat.codes\n",
        "labels = to_categorical(df_merge['label'], num_classes)\n"
      ],
      "metadata": {
        "id": "8-moZ_544CmX"
      },
      "execution_count": 64,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.model_selection import train_test_split\n",
        "\n",
        "# Split the dataset\n",
        "train_data, test_data, train_labels, test_labels = train_test_split(df_merge['anon_dicom_path'], labels, test_size=0.2, stratify=labels)\n"
      ],
      "metadata": {
        "id": "ooKZ9qHH4OhD"
      },
      "execution_count": 68,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from keras.preprocessing.image import ImageDataGenerator\n",
        "\n",
        "# Define the image size and other parameters\n",
        "image_size = (224, 224)\n",
        "batch_size = 32\n",
        "\n",
        "# Define the data directory\n",
        "data_directory = '/content/drive/MyDrive/config/sample_data'\n",
        "# Load the dataframe containing image paths and labels\n",
        "df_merge = pd.read_csv('/content/drive/MyDrive/config/tables/df_merge.csv')  # Replace with the actual path to your dataframe file\n",
        "\n",
        "# Create the data generator\n",
        "data_generator = ImageDataGenerator(rescale=1.0/255.0)\n",
        "\n",
        "\n",
        "# Create data generator for image loading and preprocessing\n",
        "image_size = (224, 224)  # Adjust as per your requirements\n",
        "datagen = ImageDataGenerator(rescale=1./255)\n",
        "# Create data generator for image loading and preprocessing\n",
        "train_data_gen = datagen.flow_from_dataframe(\n",
        "   dataframe=train_data,\n",
        "   x_col='image_path',  # Replace with the actual column name\n",
        "   y_col='label',\n",
        "   target_size=image_size,\n",
        "   class_mode='categorical',\n",
        "   batch_size=batch_size\n",
        ")\n",
        "\n",
        "test_data_gen = datagen.flow_from_dataframe(\n",
        "   dataframe=test_data,\n",
        "   x_col='image_path',  # Replace with the actual column name\n",
        "   y_col='label',\n",
        "   target_size=image_size,\n",
        "   class_mode='categorical',\n",
        "   batch_size=batch_size\n",
        ")\n"
      ],
      "metadata": {
        "id": "P_wcLvVA4RbA",
        "outputId": "309a2032-dd7f-4756-f074-1c6e7a6104c5",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 483
        }
      },
      "execution_count": 69,
      "outputs": [
        {
          "output_type": "error",
          "ename": "KeyError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/indexes/base.py\u001b[0m in \u001b[0;36mget_loc\u001b[0;34m(self, key, method, tolerance)\u001b[0m\n\u001b[1;32m   3801\u001b[0m             \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 3802\u001b[0;31m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_engine\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_loc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcasted_key\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   3803\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mKeyError\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0merr\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/_libs/index.pyx\u001b[0m in \u001b[0;36mpandas._libs.index.IndexEngine.get_loc\u001b[0;34m()\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/_libs/index.pyx\u001b[0m in \u001b[0;36mpandas._libs.index.IndexEngine.get_loc\u001b[0;34m()\u001b[0m\n",
            "\u001b[0;32mpandas/_libs/index_class_helper.pxi\u001b[0m in \u001b[0;36mpandas._libs.index.Int64Engine._check_type\u001b[0;34m()\u001b[0m\n",
            "\u001b[0;31mKeyError\u001b[0m: 'anon_dicom_path'",
            "\nThe above exception was the direct cause of the following exception:\n",
            "\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-69-2cba2ad4e9e7>\u001b[0m in \u001b[0;36m<cell line: 20>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     18\u001b[0m \u001b[0mdatagen\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mImageDataGenerator\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrescale\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m1.\u001b[0m\u001b[0;34m/\u001b[0m\u001b[0;36m255\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     19\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 20\u001b[0;31m train_data_gen = datagen.flow_from_dataframe(\n\u001b[0m\u001b[1;32m     21\u001b[0m     \u001b[0mdataframe\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mtrain_data\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     22\u001b[0m     \u001b[0mdirectory\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdata_directory\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/keras/preprocessing/image.py\u001b[0m in \u001b[0;36mflow_from_dataframe\u001b[0;34m(self, dataframe, directory, x_col, y_col, weight_col, target_size, color_mode, classes, class_mode, batch_size, shuffle, seed, save_to_dir, save_prefix, save_format, subset, interpolation, validate_filenames, **kwargs)\u001b[0m\n\u001b[1;32m   1804\u001b[0m             )\n\u001b[1;32m   1805\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1806\u001b[0;31m         return DataFrameIterator(\n\u001b[0m\u001b[1;32m   1807\u001b[0m             \u001b[0mdataframe\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1808\u001b[0m             \u001b[0mdirectory\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/keras/preprocessing/image.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, dataframe, directory, image_data_generator, x_col, y_col, weight_col, target_size, color_mode, classes, class_mode, batch_size, shuffle, seed, data_format, save_to_dir, save_prefix, save_format, subset, interpolation, keep_aspect_ratio, dtype, validate_filenames)\u001b[0m\n\u001b[1;32m    966\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdtype\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    967\u001b[0m         \u001b[0;31m# check that inputs match the required class_mode\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 968\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_check_params\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdf\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mx_col\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_col\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mweight_col\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mclasses\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    969\u001b[0m         if (\n\u001b[1;32m    970\u001b[0m             \u001b[0mvalidate_filenames\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/keras/preprocessing/image.py\u001b[0m in \u001b[0;36m_check_params\u001b[0;34m(self, df, x_col, y_col, weight_col, classes)\u001b[0m\n\u001b[1;32m   1027\u001b[0m             )\n\u001b[1;32m   1028\u001b[0m         \u001b[0;31m# check that filenames/filepaths column values are all strings\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1029\u001b[0;31m         \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mall\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdf\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mx_col\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mapply\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;32mlambda\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mstr\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1030\u001b[0m             raise TypeError(\n\u001b[1;32m   1031\u001b[0m                 \u001b[0;34mf\"All values in column x_col={x_col} must be strings.\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/series.py\u001b[0m in \u001b[0;36m__getitem__\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m    979\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    980\u001b[0m         \u001b[0;32melif\u001b[0m \u001b[0mkey_is_scalar\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 981\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_get_value\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    982\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    983\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mis_hashable\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/series.py\u001b[0m in \u001b[0;36m_get_value\u001b[0;34m(self, label, takeable)\u001b[0m\n\u001b[1;32m   1087\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1088\u001b[0m         \u001b[0;31m# Similar to Index.get_value, but we do not fall back to positional\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1089\u001b[0;31m         \u001b[0mloc\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mindex\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_loc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlabel\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1090\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mindex\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_get_values_for_loc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mloc\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlabel\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1091\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/indexes/base.py\u001b[0m in \u001b[0;36mget_loc\u001b[0;34m(self, key, method, tolerance)\u001b[0m\n\u001b[1;32m   3802\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_engine\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_loc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcasted_key\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3803\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mKeyError\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0merr\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 3804\u001b[0;31m                 \u001b[0;32mraise\u001b[0m \u001b[0mKeyError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0merr\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   3805\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mTypeError\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3806\u001b[0m                 \u001b[0;31m# If we have a listlike key, _check_indexing_error will raise\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mKeyError\u001b[0m: 'anon_dicom_path'"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import os\n",
        "import pandas as pd\n",
        "\n",
        "data = []\n",
        "\n",
        "# Traverse the main directory\n",
        "for root, dirs, files in os.walk('/content/drive/MyDrive/config/sample_data'):\n",
        "    for file in files:\n",
        "        if file.endswith('.dcm'):  # Modify the file extension if needed\n",
        "            image_path = os.path.join(root, file)\n",
        "            class_label = os.path.basename(os.path.dirname(image_path))\n",
        "            data.append({'image_path': image_path, 'class': class_label})\n",
        "\n",
        "# Create a DataFrame from the collected data\n",
        "df = pd.DataFrame(data)\n",
        "\n",
        "# Display the DataFrame\n",
        "print(df)\n"
      ],
      "metadata": {
        "id": "95FYzkfLxVm4",
        "outputId": "3bd634ad-1ca4-49a3-90ac-1dd27db25160",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 27,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "                                             image_path  \\\n",
            "0     /content/drive/MyDrive/config/sample_data/1000...   \n",
            "1     /content/drive/MyDrive/config/sample_data/1000...   \n",
            "2     /content/drive/MyDrive/config/sample_data/1000...   \n",
            "3     /content/drive/MyDrive/config/sample_data/1000...   \n",
            "4     /content/drive/MyDrive/config/sample_data/1000...   \n",
            "...                                                 ...   \n",
            "4237  /content/drive/MyDrive/config/sample_data/1174...   \n",
            "4238  /content/drive/MyDrive/config/sample_data/1174...   \n",
            "4239  /content/drive/MyDrive/config/sample_data/1174...   \n",
            "4240  /content/drive/MyDrive/config/sample_data/1174...   \n",
            "4241  /content/drive/MyDrive/config/sample_data/1174...   \n",
            "\n",
            "                                                  class  \n",
            "0       1.2.842.113684.2750825173.1524118966.4849.25082  \n",
            "1       1.2.844.113684.2750825168.1524118972.4854.25053  \n",
            "2       1.2.841.113683.2750825170.1524118969.4855.25213  \n",
            "3     1.2.844.113690.2750825168.1524118970.4853.25073.1  \n",
            "4     1.2.840.113684.2750825173.1524118967.4848.25046.1  \n",
            "...                                                 ...  \n",
            "4237   1.2.844.113686.2750824504.1446791434.4909.1751.1  \n",
            "4238  1.2.841.113681.2750824662.1580193172.5097.5358...  \n",
            "4239  1.2.846.113686.2750824659.1580193169.5095.5354...  \n",
            "4240  1.2.844.113686.2750824661.1580193171.5095.5354...  \n",
            "4241  1.2.846.113686.2750824664.1580193167.5098.5354...  \n",
            "\n",
            "[4242 rows x 2 columns]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import os\n",
        "import pandas as pd\n",
        "from tensorflow.keras.preprocessing.image import ImageDataGenerator\n",
        "from sklearn.model_selection import train_test_split\n",
        "\n",
        "# Define the image size and other parameters\n",
        "image_size = (224, 224)\n",
        "batch_size = 32\n",
        "\n",
        "# Define the data directory\n",
        "data_directory = '/content/drive/MyDrive/config/sample_data'\n",
        "\n",
        "# Load the dataframe containing image paths and labels\n",
        "df_merge = pd.read_csv('/content/drive/MyDrive/config/tables/df_merge.csv')  # Replace with the actual path to your dataframe file\n",
        "\n",
        "# Split the dataframe into train and test sets\n",
        "#train_df, test_df = train_test_split(df_merge, test_size=0.2, stratify=df_merge['asses'])\n",
        "\n",
        "# Create the data generator\n",
        "data_generator = ImageDataGenerator(rescale=1.0/255.0)\n",
        "\n",
        "# Load and prepare the training dataset\n",
        "train_data = data_generator.flow_from_dataframe(\n",
        "    train_df,\n",
        "    directory=data_directory,\n",
        "    x_col='anon_dicom_path',\n",
        "    y_col='asses',\n",
        "    target_size=image_size,\n",
        "    batch_size=batch_size,\n",
        "    class_mode='categorical'\n",
        ")\n",
        "\n",
        "# Load and prepare the testing dataset\n",
        "test_data = data_generator.flow_from_dataframe(\n",
        "    test_df,\n",
        "    directory=data_directory,\n",
        "    x_col='anon_dicom_path',\n",
        "    y_col='asses',\n",
        "    target_size=image_size,\n",
        "    batch_size=batch_size,\n",
        "    class_mode='categorical'\n",
        ")\n",
        "\n"
      ],
      "metadata": {
        "id": "x_d9wzDj21Lp",
        "outputId": "a9cc0207-7f27-4ff1-f6b2-507b5d2a154e",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 70,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Found 0 validated image filenames belonging to 0 classes.\n",
            "Found 0 validated image filenames belonging to 0 classes.\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/keras/preprocessing/image.py:1137: UserWarning: Found 25845 invalid image filename(s) in x_col=\"anon_dicom_path\". These filename(s) will be ignored.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/keras/preprocessing/image.py:1137: UserWarning: Found 6462 invalid image filename(s) in x_col=\"anon_dicom_path\". These filename(s) will be ignored.\n",
            "  warnings.warn(\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from tensorflow.keras.models import Sequential\n",
        "from tensorflow.keras.layers import Conv2D, MaxPooling2D, GlobalAveragePooling2D, Dense\n",
        "\n",
        "# Define the model architecture\n",
        "model = Sequential()\n",
        "model.add(Conv2D(32, (3, 3), activation='relu', input_shape=(224, 224, 3)))\n",
        "model.add(MaxPooling2D((2, 2)))\n",
        "model.add(Conv2D(64, (3, 3), activation='relu'))\n",
        "model.add(MaxPooling2D((2, 2)))\n",
        "model.add(GlobalAveragePooling2D())\n",
        "model.add(Dense(128, activation='relu'))\n",
        "model.add(Dense(num_classes, activation='softmax'))\n",
        "\n",
        "# Compile the model\n",
        "model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])\n",
        "\n",
        "# Train the model\n",
        "model.fit(train_data, validation_data=test_data, epochs=10)\n"
      ],
      "metadata": {
        "id": "GH39SmXU3FK5",
        "outputId": "f2b12a39-f3a0-4fae-df01-9d17475ff674",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 356
        }
      },
      "execution_count": 61,
      "outputs": [
        {
          "output_type": "error",
          "ename": "ValueError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-61-b58774860af8>\u001b[0m in \u001b[0;36m<cell line: 18>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     16\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     17\u001b[0m \u001b[0;31m# Train the model\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 18\u001b[0;31m \u001b[0mmodel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtrain_data\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvalidation_data\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mtest_data\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mepochs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m10\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/keras/utils/traceback_utils.py\u001b[0m in \u001b[0;36merror_handler\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m     68\u001b[0m             \u001b[0;31m# To get the full stack trace, call:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     69\u001b[0m             \u001b[0;31m# `tf.debugging.disable_traceback_filtering()`\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 70\u001b[0;31m             \u001b[0;32mraise\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwith_traceback\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfiltered_tb\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     71\u001b[0m         \u001b[0;32mfinally\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     72\u001b[0m             \u001b[0;32mdel\u001b[0m \u001b[0mfiltered_tb\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/keras/preprocessing/image.py\u001b[0m in \u001b[0;36m__getitem__\u001b[0;34m(self, idx)\u001b[0m\n\u001b[1;32m    101\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m__getitem__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0midx\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    102\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0midx\u001b[0m \u001b[0;34m>=\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 103\u001b[0;31m             raise ValueError(\n\u001b[0m\u001b[1;32m    104\u001b[0m                 \u001b[0;34m\"Asked to retrieve element {idx}, \"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    105\u001b[0m                 \u001b[0;34m\"but the Sequence \"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mValueError\u001b[0m: Asked to retrieve element 0, but the Sequence has length 0"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "hTRVODt83VOc"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}